{
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jahnavi0507/lift-off/blob/main/machine%20learning\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE\n",
        "# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.\n",
        "import kagglehub\n",
        "kagglehub.login()\n"
      ],
      "metadata": {
        "id": "5yUHL_2wC3T8"
      },
      "cell_type": "code",
      "outputs": [],
      "execution_count": null
    },
    {
      "source": [
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "\n",
        "house_prices_advanced_regression_techniques_path = kagglehub.competition_download('house-prices-advanced-regression-techniques')\n",
        "\n",
        "print('Data source import complete.')\n"
      ],
      "metadata": {
        "id": "8Xc-Z2lUC3UB"
      },
      "cell_type": "code",
      "outputs": [],
      "execution_count": null
    },
    {
      "source": [
        "#import some necessary librairies\n",
        "\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt  # Matlab-style plotting\n",
        "import seaborn as sns\n",
        "color = sns.color_palette()\n",
        "sns.set_style('darkgrid')\n",
        "import warnings\n",
        "def ignore_warn(*args, **kwargs):\n",
        "    pass\n",
        "warnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n",
        "\n",
        "\n",
        "from scipy import stats\n",
        "from scipy.stats import norm, skew #for some statistics\n",
        "\n",
        "\n",
        "pd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n",
        "\n",
        "\n",
        "from subprocess import check_output\n",
        "print(check_output([\"ls\", \"../input\"]).decode(\"utf8\")) #check the files available in the directory"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "c9b1d5dff21d39260eb47af6fe7aac4bd03be233",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "2dbccbd6-138b-4f1b-9b23-fd60c7525c14",
        "id": "aKErh_yHC3UI"
      }
    },
    {
      "source": [
        "#Now let's import and put the train and test datasets in  pandas dataframe\n",
        "\n",
        "train = pd.read_csv('../input/train.csv')\n",
        "test = pd.read_csv('../input/test.csv')\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "0e694d13459e3e200f6e2c6333c887cbad779ba9",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "59617b4b-d797-44ce-9142-05fbfd36aada",
        "id": "BMBx5sWFC3UK"
      }
    },
    {
      "source": [
        "##display the first five rows of the test dataset.\n",
        "test.head(5)\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "816b1463b3dd0daf44949a1fa15ebfbc0e2f1235",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "ff37c1ba-8679-49e0-b3c8-9c53d01b1b04",
        "id": "4dMy7ZgeC3UL"
      }
    },
    {
      "source": [
        "#check the numbers of samples and features\n",
        "print(\"The train data size before dropping Id feature is : {} \".format(train.shape))\n",
        "print(\"The test data size before dropping Id feature is : {} \".format(test.shape))\n",
        "\n",
        "#Save the 'Id' column\n",
        "train_ID = train['Id']\n",
        "test_ID = test['Id']\n",
        "\n",
        "#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\n",
        "train.drop(\"Id\", axis = 1, inplace = True)\n",
        "test.drop(\"Id\", axis = 1, inplace = True)\n",
        "\n",
        "#check again the data size after dropping the 'Id' variable\n",
        "print(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape))\n",
        "print(\"The test data size after dropping Id feature is : {} \".format(test.shape))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "687813c270cbfdedccc7a9e4ec9fbb78a99d54ed",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "b24451a1-fb8c-4094-ad0b-0940469d07fc",
        "id": "bkIXy5WAC3UM"
      }
    },
    {
      "source": [
        "\n",
        "fig, ax = plt.subplots()\n",
        "ax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\n",
        "plt.ylabel('SalePrice', fontsize=13)\n",
        "plt.xlabel('GrLivArea', fontsize=13)\n",
        "plt.show()\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "8903aa1a4a700aa2160edb3baf806f3800ae7d9a",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "637bd0fd-7508-41d1-b240-ea0e8598dddf",
        "id": "ZHnn6whCC3UO"
      }
    },
    {
      "source": [
        "#Deleting outliers\n",
        "train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n",
        "\n",
        "#Check the graphic again\n",
        "fig, ax = plt.subplots()\n",
        "ax.scatter(train['GrLivArea'], train['SalePrice'])\n",
        "plt.ylabel('SalePrice', fontsize=13)\n",
        "plt.xlabel('GrLivArea', fontsize=13)\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "583bb417102d7bebb4aaf14bcb1aebcae86443bb",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "6c5780b2-d4a8-42d9-b902-c6a23eef7d99",
        "id": "nQeQHm-DC3UP"
      }
    },
    {
      "source": [
        "sns.distplot(train['SalePrice'] , fit=norm);\n",
        "\n",
        "# Get the fitted parameters used by the function\n",
        "(mu, sigma) = norm.fit(train['SalePrice'])\n",
        "print( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n",
        "\n",
        "#Now plot the distribution\n",
        "plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n",
        "            loc='best')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('SalePrice distribution')\n",
        "\n",
        "#Get also the QQ-plot\n",
        "fig = plt.figure()\n",
        "res = stats.probplot(train['SalePrice'], plot=plt)\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "be3b0157031685ed3dbc31a657ba712312691830",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "a17ad845-6fca-4d47-8e44-7c4c44f0427d",
        "id": "OQJxRPLOC3UR"
      }
    },
    {
      "source": [
        "#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\n",
        "train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n",
        "\n",
        "#Check the new distribution\n",
        "sns.distplot(train['SalePrice'] , fit=norm);\n",
        "\n",
        "# Get the fitted parameters used by the function\n",
        "(mu, sigma) = norm.fit(train['SalePrice'])\n",
        "print( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n",
        "\n",
        "#Now plot the distribution\n",
        "plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n",
        "            loc='best')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('SalePrice distribution')\n",
        "\n",
        "#Get also the QQ-plot\n",
        "fig = plt.figure()\n",
        "res = stats.probplot(train['SalePrice'], plot=plt)\n",
        "plt.show()\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "719cf6a9dca56cc529e97af21816d291fa8bd8c0",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "21b3a0ad-bd68-49aa-a3d7-40a30b3c59dc",
        "id": "k9boChkiC3US"
      }
    },
    {
      "source": [
        "ntrain = train.shape[0]\n",
        "ntest = test.shape[0]\n",
        "y_train = train.SalePrice.values\n",
        "all_data = pd.concat((train, test)).reset_index(drop=True)\n",
        "all_data.drop(['SalePrice'], axis=1, inplace=True)\n",
        "print(\"all_data size is : {}\".format(all_data.shape))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "efc576211e4eed962f04cd94d901c667e6912528",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "1bd3e9b9-2f42-4251-aadd-5ced84eb1a27",
        "id": "5rm3Af-3C3UT"
      }
    },
    {
      "source": [
        "all_data_na = (all_data.isnull().sum() / len(all_data)) * 100\n",
        "all_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\n",
        "missing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\n",
        "missing_data.head(20)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "f97d25548ec8f6c02e2d1ee5a6df6c3d107fdf53",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "501b465f-8c80-4b93-81d0-a5d41e08d235",
        "id": "-paR3CwLC3UU"
      }
    },
    {
      "source": [
        "f, ax = plt.subplots(figsize=(15, 12))\n",
        "plt.xticks(rotation='90')\n",
        "sns.barplot(x=all_data_na.index, y=all_data_na)\n",
        "plt.xlabel('Features', fontsize=15)\n",
        "plt.ylabel('Percent of missing values', fontsize=15)\n",
        "plt.title('Percent missing data by feature', fontsize=15)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "2eb6e1361884db6a4f65afc3b158fcbe85c2392e",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "1c80610d-8f19-43c8-bd54-7d786b0dca49",
        "id": "gRcOQQVWC3UU"
      }
    },
    {
      "source": [
        "#Correlation map to see how features are correlated with SalePrice\n",
        "corrmat = train.corr()\n",
        "plt.subplots(figsize=(12,9))\n",
        "sns.heatmap(corrmat, vmax=0.9, square=True)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "0f6b9912c752212f3f4bdca0b60f5fd01c12d2a0",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "3fc115c7-33bb-456d-b3e5-4dd985bfbc9f",
        "id": "BdX4RtPKC3UW"
      }
    },
    {
      "source": [
        "all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "1d94b062f7683d711d479e48530009040185fd4c",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "ca8a04eb-f42b-4c26-a690-bb98c95c6118",
        "id": "oHXOCbXQC3UY"
      }
    },
    {
      "source": [
        "- **MiscFeature** : data description says NA means \"no misc feature\"\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "0516efe507d7176591f6af3d503312db5038949a",
        "_execution_state": "idle",
        "_cell_guid": "ea3aecb9-b2e8-4cdc-853d-999f8e2f789c",
        "id": "xQA4NtqWC3UY"
      }
    },
    {
      "source": [
        "all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "c311993a26d66d66ce82584a3e00d7ed56a3ea5a",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "689863b8-4e4e-45d7-9972-8894e8defbe2",
        "id": "FLcTfpmlC3UZ"
      }
    },
    {
      "source": [
        "- **Alley** : data description says NA means \"no alley access\""
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "44cfbd9eecce5e4f2bc91a72ed095270e6010f57",
        "_execution_state": "idle",
        "_cell_guid": "d467b9e0-0793-41e5-aaa1-d1686946ba9f",
        "id": "WMBkWkraC3Ug"
      }
    },
    {
      "source": [
        "all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "35709caf5cb2b0220cd9043f76462a116de15059",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "0f822e30-09f3-45f8-b09e-0ffed4ff985c",
        "id": "ztiOlLtGC3Ug"
      }
    },
    {
      "source": [
        "- **Fence** : data description says NA means \"no fence\""
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "3265fc176140dbf1b641e18f2d57b91554c85771",
        "_execution_state": "idle",
        "_cell_guid": "0bab3349-eddb-4977-acd5-8dad4553ff7f",
        "id": "M8vqhZVWC3Ug"
      }
    },
    {
      "source": [
        "all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "6d9d6998298a7fea5677f0916bcc9f33dc99e231",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "c0d6e4f4-df14-467f-bab2-86bfd0493a35",
        "id": "SweSKSaTC3Uh"
      }
    },
    {
      "source": [
        "- **FireplaceQu** : data description says NA means \"no fireplace\""
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "4869889d4b2b118bc6dcef239cbc27546a7b445e",
        "_execution_state": "idle",
        "_cell_guid": "49747765-81f1-4b23-ad63-534c7fe48b7a",
        "id": "wk2HH4w3C3Uh"
      }
    },
    {
      "source": [
        "all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "fb8cdb59e4ecba1f7ec78eb3b34c7209c34b1c86",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "22b88c5b-6419-424f-9805-2c2b11e85dca",
        "id": "QgC7wmezC3Uh"
      }
    },
    {
      "source": [
        "- **LotFrontage** : Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can **fill in missing values by the median LotFrontage of the neighborhood**."
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "2b00af603b7dbc9114e62c421b2b886154d31959",
        "_execution_state": "idle",
        "_cell_guid": "357994d1-974a-49ee-98e4-a19bc524fcb6",
        "id": "ELVuuN-WC3Uh"
      }
    },
    {
      "source": [
        "#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\n",
        "all_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n",
        "    lambda x: x.fillna(x.median()))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "56c268a7217e85301d2847ceeca410d62e781b89",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "b8cd4872-67c6-4c82-a1a3-807d08efb658",
        "id": "C0sUm4IrC3Uh"
      }
    },
    {
      "source": [
        "- **GarageType, GarageFinish, GarageQual and GarageCond** : Replacing missing data with None"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "53712c1d6c7cf2945c6ba8b537171ea6b84f085e",
        "_execution_state": "idle",
        "_cell_guid": "c0432c37-f664-4da1-a4d8-87a7cb450bd1",
        "id": "_2UblDPjC3Ui"
      }
    },
    {
      "source": [
        "for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n",
        "    all_data[col] = all_data[col].fillna('None')"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "d556da5418394ed50d3c14bd02668714cee0fb4a",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "f264979e-f5e2-4aae-b313-7468570c0294",
        "id": "sqmp47QqC3Ui"
      }
    },
    {
      "source": [
        "- **GarageYrBlt, GarageArea and GarageCars** : Replacing missing data with 0 (Since No garage = no cars in such garage.)\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "b38ea3ec1c4b8fa4b31e8f86f378798319c05a71",
        "_execution_state": "idle",
        "_cell_guid": "92173e82-fd12-4fa0-b7dd-f66fb7b0be3b",
        "id": "8SbhBSEBC3Ui"
      }
    },
    {
      "source": [
        "for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n",
        "    all_data[col] = all_data[col].fillna(0)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "2726cce29df2a2621c54c4c8a06eb570a7191552",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "ada7acfa-8bc3-4d52-9f42-28a78cefc950",
        "id": "XN0xvpCSC3Uj"
      }
    },
    {
      "source": [
        "- **BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath** : missing values are likely zero for having no basement"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "1729c36d95461d03679eb95e18eaac3d37aeb076",
        "_execution_state": "idle",
        "_cell_guid": "b9f955c5-4e03-4835-8df7-1284120453ff",
        "id": "TLQKSicPC3Uj"
      }
    },
    {
      "source": [
        "for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n",
        "    all_data[col] = all_data[col].fillna(0)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "3008a6bd07ed883ff92a83ebe390940a24010fcb",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "dd9e7ef7-3cee-437a-9a33-20987e238425",
        "id": "upXjVNowC3Uj"
      }
    },
    {
      "source": [
        "- **BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2** : For all these categorical basement-related features, NaN means that there is no  basement.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "d4ed0fcea9f8bb309118ba2fb703431e386c6cbd",
        "_execution_state": "idle",
        "_cell_guid": "441b397e-c527-4bd5-8d3c-df6aeba72192",
        "id": "HcCq2pFIC3Uk"
      }
    },
    {
      "source": [
        "for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n",
        "    all_data[col] = all_data[col].fillna('None')"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "ee281d3c691a50795e93bb797603c697d320b286",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "6d7aa4f6-41b9-4f27-acb0-8af6aca2c8ff",
        "id": "Rp8Fqk18C3Uk"
      }
    },
    {
      "source": [
        "- **MasVnrArea and MasVnrType** : NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "556165bc959cd6ff2354cb774341ac947d052f6a",
        "_execution_state": "idle",
        "_cell_guid": "e7f2515f-8438-4075-9d22-0b37c1a2ef01",
        "id": "REdimXOZC3Uk"
      }
    },
    {
      "source": [
        "all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\n",
        "all_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "800ff604bb70023baf1d403b53b674b765d9047c",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "63a3a030-482f-4292-a887-16880f7a2882",
        "id": "8PkVgYMzC3Uk"
      }
    },
    {
      "source": [
        "- **MSZoning (The general zoning classification)** :  'RL' is by far  the most common value.  So we can fill in missing values with 'RL'\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "ded1f7ea0443654bd033eeed1361056f820a925b",
        "_execution_state": "idle",
        "_cell_guid": "f2f7f337-de24-44ec-93a6-09428ec9a252",
        "id": "LUExesFqC3Ul"
      }
    },
    {
      "source": [
        "all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "ca93ce9b34c853c1bb11d837eaff6c2986234757",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "0e4f28b5-784c-4369-92f4-bda15fa55172",
        "id": "nMcSkng9C3Ul"
      }
    },
    {
      "source": [
        "- **Utilities** : For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\"  and 2 NA . Since the house with 'NoSewa' is in the training set, **this feature won't help in predictive modelling**. We can then safely  remove it.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "de39073aef3db7d13894fa82285eff803d6e5c1b",
        "_execution_state": "idle",
        "_cell_guid": "99310a4b-9dbf-4273-81b5-94bf0adf338c",
        "id": "u3z1XfmbC3Ul"
      }
    },
    {
      "source": [
        "all_data = all_data.drop(['Utilities'], axis=1)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "de8ee2aca9eb3eeed7442cd9d12843cc64746708",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "facec65d-945f-4be1-86c8-1be011cc2bd0",
        "id": "vcIMB3WfC3Um"
      }
    },
    {
      "source": [
        "- **Functional** : data description says NA means typical"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "3450d048089ba8ff98807c6ae3b745b0a34165f9",
        "_execution_state": "idle",
        "_cell_guid": "c6aabfcd-4a1d-4845-88a1-b2f5cb7d8901",
        "id": "sR1Ek4okC3Um"
      }
    },
    {
      "source": [
        "all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "e2d331e991fa868320b5d089f61c58b54ce7cb37",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "c968aa5e-c34f-442e-9388-69e074a2c84e",
        "id": "Boc5aw0lC3Um"
      }
    },
    {
      "source": [
        "- **Electrical** : It has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "c122f5b5596bc4ce615c6b620b7e1824a54a47b8",
        "_execution_state": "idle",
        "_cell_guid": "4f2bad4d-8db8-4ac3-8991-ffa2c775a72d",
        "id": "bG7SCMKzC3Um"
      }
    },
    {
      "source": [
        "all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "d31761ee8878ce4143cf21adde149cd622c5a039",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "d93eab84-7759-4201-bd7d-d450399478f7",
        "id": "UvLFpzZVC3Un"
      }
    },
    {
      "source": [
        "- **KitchenQual**: Only one NA value, and same as Electrical, we set 'TA' (which is the most frequent)  for the missing value in KitchenQual.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "8e0fd54a802f1eddfec0aa4104412c19e1c266d0",
        "_execution_state": "idle",
        "_cell_guid": "3d089b8e-3392-4067-a5a1-4f6d4e3e8fb5",
        "id": "QPF8fOAWC3Un"
      }
    },
    {
      "source": [
        "all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "23071ddb69b67b1d742bb15d260421d57aed5583",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "9f68e47a-5b50-436f-9e31-ff65a1cb1687",
        "id": "N4IhoyN6C3Un"
      }
    },
    {
      "source": [
        "- **Exterior1st and Exterior2nd** : Again Both Exterior 1 & 2 have only one missing value. We will just substitute in the most common string\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "e8aca612daf293e7228eed9647370036d003e0fb",
        "_execution_state": "idle",
        "_cell_guid": "e32aec7d-2841-4bfc-a6d2-d181000af4b8",
        "id": "JySUz_OmC3Uo"
      }
    },
    {
      "source": [
        "all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\n",
        "all_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "6375e9c7c145e0f2832cbe03addbce3d90cb44c4",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "85903feb-7fdb-4911-9a6a-f29629bbf308",
        "id": "sv-xdVsAC3Uo"
      }
    },
    {
      "source": [
        "- **SaleType** : Fill in again with most frequent which is \"WD\""
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "67f41f0ad648d536d70e2ccb617a4b495fb7f782",
        "_execution_state": "idle",
        "_cell_guid": "b87d629d-6820-4f3e-80f3-efc16436b982",
        "id": "KDsrBmvQC3Uq"
      }
    },
    {
      "source": [
        "all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "06c104efedaf57a4052c8f61c502cb6313e0beea",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "aaa407ac-ad4a-4313-8530-ac96826be6e5",
        "id": "5n-AnD48C3Ur"
      }
    },
    {
      "source": [
        "- **MSSubClass** : Na most likely means No building class. We can replace missing values with None\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "8a3a35f5dc00732929143480a8a0b34a2a502c27",
        "_execution_state": "idle",
        "_cell_guid": "8ddca94e-7cfa-4f25-9333-29e013c9c30d",
        "id": "NqplxpTlC3Ur"
      }
    },
    {
      "source": [
        "\n",
        "all_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")\n",
        "\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "9608a2eada6013e7f14e9341862cca0dca4621e9",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "23dedd0c-7d5e-4870-8588-8bc4890f627b",
        "id": "w32137H9C3Ur"
      }
    },
    {
      "source": [
        "Is there any remaining missing value ?"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "465570fcce8944ee31b1709ec6954d03cbf32ff8",
        "_execution_state": "idle",
        "_cell_guid": "9193270b-8e7b-4a24-b769-d6eb661a1ae7",
        "id": "Fyfn4fT4C3Us"
      }
    },
    {
      "source": [
        "#Check remaining missing values if any\n",
        "all_data_na = (all_data.isnull().sum() / len(all_data)) * 100\n",
        "all_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\n",
        "missing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\n",
        "missing_data.head()"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "b091fa2ebef19425019e2e550410d0376b9e9fac",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "0adf05cf-ce60-4169-805c-ca776e60e85a",
        "id": "nTfnuqvMC3Us"
      }
    },
    {
      "source": [
        "It remains no missing value.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "360f518886ac45afe2963b9b53edb17c2be4a130",
        "_execution_state": "idle",
        "_cell_guid": "78266762-5180-44fa-a630-b808706800d4",
        "id": "nihwLvIrC3Us"
      }
    },
    {
      "source": [
        "###More features engeneering"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "915505b9c21b4dd84cc466660a68fb0d6b84cfae",
        "_execution_state": "idle",
        "_cell_guid": "7996debf-c724-4365-9d63-f6104bae6140",
        "id": "iVU4K4_DC3Us"
      }
    },
    {
      "source": [
        "**Transforming some numerical variables that are really categorical**"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "1cfcb671a97068569efb4e7855da91aa30c5bbde",
        "_execution_state": "idle",
        "_cell_guid": "0d5076fa-b4ab-4787-bebb-8fd445b8815a",
        "id": "_vby0eY8C3Us"
      }
    },
    {
      "source": [
        "#MSSubClass=The building class\n",
        "all_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n",
        "\n",
        "\n",
        "#Changing OverallCond into a categorical variable\n",
        "all_data['OverallCond'] = all_data['OverallCond'].astype(str)\n",
        "\n",
        "\n",
        "#Year and month sold are transformed into categorical features.\n",
        "all_data['YrSold'] = all_data['YrSold'].astype(str)\n",
        "all_data['MoSold'] = all_data['MoSold'].astype(str)\n",
        "\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "cc7557817a4442e799e4e4c84dd1efd8bd08867a",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "a52dc2f9-ca02-4024-987a-165ce630b356",
        "id": "wNpAKVQhC3Ut"
      }
    },
    {
      "source": [
        "**Label Encoding some categorical variables that may contain information in their ordering set**"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "c4743ffb7fbb050edca7c77dc7cb6520577c1398",
        "_execution_state": "idle",
        "_cell_guid": "9f80c0e7-3f3f-45c5-b111-e36f4e31e814",
        "id": "gSJH3Ue8C3Ut"
      }
    },
    {
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond',\n",
        "        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1',\n",
        "        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n",
        "        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond',\n",
        "        'YrSold', 'MoSold')\n",
        "# process columns, apply LabelEncoder to categorical features\n",
        "for c in cols:\n",
        "    lbl = LabelEncoder()\n",
        "    lbl.fit(list(all_data[c].values))\n",
        "    all_data[c] = lbl.transform(list(all_data[c].values))\n",
        "\n",
        "# shape\n",
        "print('Shape all_data: {}'.format(all_data.shape))\n",
        "\n",
        "\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "fdb5ddf0a49a3c6df303c569c9f3509c79ac8b61",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "81c97efb-4f76-4e87-861a-10a60ab5c84b",
        "id": "mDWGaQOsC3Ut"
      }
    },
    {
      "source": [
        "# Adding total sqfootage feature\n",
        "all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "208f8d22188786227fff4a978dc3b11b4e1ffd90",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "fc1a8f1a-f003-4538-8e60-d819f46362a3",
        "id": "v99Pj12IC3Uu"
      }
    },
    {
      "source": [
        "numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n",
        "\n",
        "# Check the skew of all numerical features\n",
        "skewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\n",
        "print(\"\\nSkew in numerical features: \\n\")\n",
        "skewness = pd.DataFrame({'Skew' :skewed_feats})\n",
        "skewness.head(10)\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "53c471c7008c66590f257e70866f8a3037813f13",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "c5972a73-7e86-4164-a9d6-58432dae1933",
        "id": "fzz_qMLfC3Uu"
      }
    },
    {
      "source": [
        "skewness = skewness[abs(skewness) > 0.75]\n",
        "print(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n",
        "\n",
        "from scipy.special import boxcox1p\n",
        "skewed_features = skewness.index\n",
        "lam = 0.15\n",
        "for feat in skewed_features:\n",
        "    #all_data[feat] += 1\n",
        "    all_data[feat] = boxcox1p(all_data[feat], lam)\n",
        "\n",
        "#all_data[skewed_features] = np.log1p(all_data[skewed_features])"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "969fdff338ef46f064d8f855782c96d322a264b1",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "d8ebce87-c55d-46c6-8f06-8b34116d7370",
        "id": "D8lBt9_xC3Uu"
      }
    },
    {
      "source": [
        "\n",
        "all_data = pd.get_dummies(all_data)\n",
        "print(all_data.shape)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "acd44e283867425257ffd1fb2f4893cdbff43f67",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "c8e63516-e4e2-4f36-a60e-1c8316392c60",
        "id": "xxW9ZoNqC3Uv"
      }
    },
    {
      "source": [
        "train = all_data[:ntrain]\n",
        "test = all_data[ntrain:]\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "89e464095544a53177d5a009b914ba4c660072a7",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "0a75646f-1974-40ad-a085-ff7bc08454a5",
        "id": "LnDBu26BC3Uv"
      }
    },
    {
      "source": [
        "from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\n",
        "from sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\n",
        "from sklearn.kernel_ridge import KernelRidge\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.preprocessing import RobustScaler\n",
        "from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n",
        "from sklearn.model_selection import KFold, cross_val_score, train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import xgboost as xgb\n",
        "import lightgbm as lgb\n",
        "\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "fc664fbe27561a3697d0210921107b0e14b7d211",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "135e8ac5-ce46-4a5f-b205-13f827ef33b8",
        "id": "d80MHAuOC3Uw"
      }
    },
    {
      "source": [
        "#Validation function\n",
        "n_folds = 5\n",
        "\n",
        "def rmsle_cv(model):\n",
        "    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n",
        "    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n",
        "    return(rmse)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "5c12551d092a6c5cf32d86398b054da7af3047b8",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "f396260b-e182-4a87-9a2a-b92b9375ea6f",
        "id": "a-bn85pKC3Uw"
      }
    },
    {
      "source": [
        "lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "2a50c954cb771d350c3092c3658486ba4d22aba5",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "03f45cb7-0a40-45ea-94e8-64fd7ff1e8f6",
        "id": "sO3wCrMyC3Ux"
      }
    },
    {
      "source": [
        "KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "3199c83513d93407c818ce1ed43c6c52e7f5a8c6",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "805343d9-0af6-43a2-a351-c0b25c62fcf0",
        "id": "l63RfaK6C3Uy"
      }
    },
    {
      "source": [
        "GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n",
        "                                   max_depth=4, max_features='sqrt',\n",
        "                                   min_samples_leaf=15, min_samples_split=10,\n",
        "                                   loss='huber', random_state =5)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "9a983f0f62a0dde7689b20a8e52022bb189478b4",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "af13332c-fd37-40bb-a078-6bad6caaa2ab",
        "id": "mirzjBWHC3Uy"
      }
    },
    {
      "source": [
        "model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468,\n",
        "                             learning_rate=0.05, max_depth=3,\n",
        "                             min_child_weight=1.7817, n_estimators=2200,\n",
        "                             reg_alpha=0.4640, reg_lambda=0.8571,\n",
        "                             subsample=0.5213, silent=1,\n",
        "                             random_state =7, nthread = -1)\n",
        "\n"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "57c24b596ceb46d6f32ebf9501d672d7e469c15b",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "ed738a4c-c246-443c-a3c1-39df25f988b7",
        "id": "jVJwi-PjC3Uz"
      }
    },
    {
      "source": [
        "score = rmsle_cv(lasso)\n",
        "print(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "7d994349237b9304b0d17719e1af077e69288229",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "2d0cc958-1654-425c-90ed-1ceb9edd7186",
        "id": "xIhTngb6C3U1"
      }
    },
    {
      "source": [
        "score = rmsle_cv(ENet)\n",
        "print(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "b6d299b9d4a0cdb23ddd8459b3935da2948016d6",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "7cf6faaf-d69a-4268-b192-a9e60d207c28",
        "id": "H--jAemFC3U1"
      }
    },
    {
      "source": [
        "score = rmsle_cv(KRR)\n",
        "print(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "437dc093e88d661a369539520af1b4c37d1a0c1a",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "a1195106-2170-47f2-86a7-c4f3be683aa8",
        "id": "kaReiZYZC3U1"
      }
    },
    {
      "source": [
        "score = rmsle_cv(GBoost)\n",
        "print(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "e9d8c4bd191f77d8d275f53c0c1a6cf344151294",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "43dd152f-7c49-41b6-8f8e-a5864b1e2a71",
        "id": "i2HF2UmIC3U2"
      }
    },
    {
      "source": [
        "\n",
        "score = rmsle_cv(model_xgb)\n",
        "print(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "5f52ccf39d01165e61a7c6be8b788be4e58e286b",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "30738ecc-39f8-44ed-9f42-68518beb7e6a",
        "id": "9Us_rjN1C3U2"
      }
    },
    {
      "source": [
        "score = rmsle_cv(model_lgb)\n",
        "print(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "5cd5377ee097fbc6fd14b42b4ea654221b097e59",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "41e0eab9-630d-48d3-905b-e4663aad2262",
        "id": "UAraRXGgC3U2"
      }
    },
    {
      "source": [
        "**Averaged base models class**"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "5ecc887f1ab4001c872862cecf3a0b350ac51a23",
        "_execution_state": "idle",
        "_cell_guid": "d0145496-896a-44e3-b01b-e12546328f06",
        "id": "CYVTZtoDC3U4"
      }
    },
    {
      "source": [
        "class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n",
        "    def __init__(self, models):\n",
        "        self.models = models\n",
        "\n",
        "    # we define clones of the original models to fit the data in\n",
        "    def fit(self, X, y):\n",
        "        self.models_ = [clone(x) for x in self.models]\n",
        "\n",
        "        # Train cloned base models\n",
        "        for model in self.models_:\n",
        "            model.fit(X, y)\n",
        "\n",
        "        return self\n",
        "\n",
        "    #Now we do the predictions for cloned models and average them\n",
        "    def predict(self, X):\n",
        "        predictions = np.column_stack([\n",
        "            model.predict(X) for model in self.models_\n",
        "        ])\n",
        "        return np.mean(predictions, axis=1)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "ff3ee5889bcac40847909c3a71285d2b8f9d431f",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "49e44ad6-8dc4-4a67-8079-adbac934fec4",
        "id": "gzSvKZMqC3U5"
      }
    },
    {
      "source": [
        "**Averaged base models score**"
      ],
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "f05bf966ea7a7b5e6f8ca5d641ebd11281d54d0d",
        "_execution_state": "idle",
        "_cell_guid": "825eb99f-d509-4203-b0c6-4ff77f696322",
        "id": "xom2G4MTC3U7"
      }
    },
    {
      "source": [
        "averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n",
        "\n",
        "score = rmsle_cv(averaged_models)\n",
        "print(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "81ce9e148b7e735f465b4b6508511dea44fbf791",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "d480916f-89e7-4bcc-9b9d-b54492591654",
        "id": "9Le7pph0C3U7"
      }
    },
    {
      "source": [
        "class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n",
        "    def __init__(self, base_models, meta_model, n_folds=5):\n",
        "        self.base_models = base_models\n",
        "        self.meta_model = meta_model\n",
        "        self.n_folds = n_folds\n",
        "\n",
        "    # We again fit the data on clones of the original models\n",
        "    def fit(self, X, y):\n",
        "        self.base_models_ = [list() for x in self.base_models]\n",
        "        self.meta_model_ = clone(self.meta_model)\n",
        "        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n",
        "\n",
        "        # Train cloned base models then create out-of-fold predictions\n",
        "        # that are needed to train the cloned meta-model\n",
        "        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n",
        "        for i, model in enumerate(self.base_models):\n",
        "            for train_index, holdout_index in kfold.split(X, y):\n",
        "                instance = clone(model)\n",
        "                self.base_models_[i].append(instance)\n",
        "                instance.fit(X[train_index], y[train_index])\n",
        "                y_pred = instance.predict(X[holdout_index])\n",
        "                out_of_fold_predictions[holdout_index, i] = y_pred\n",
        "\n",
        "        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n",
        "        self.meta_model_.fit(out_of_fold_predictions, y)\n",
        "        return self\n",
        "\n",
        "    #Do the predictions of all base models on the test data and use the averaged predictions as\n",
        "    #meta-features for the final prediction which is done by the meta-model\n",
        "    def predict(self, X):\n",
        "        meta_features = np.column_stack([\n",
        "            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n",
        "            for base_models in self.base_models_ ])\n",
        "        return self.meta_model_.predict(meta_features)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "9115cf7180ba9491bd0a2c5bd566e18238c9de80",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "03326750-2442-4e14-8774-6e2ce9330173",
        "id": "LsXLkM4GC3VA"
      }
    },
    {
      "source": [
        "stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n",
        "                                                 meta_model = lasso)\n",
        "\n",
        "score = rmsle_cv(stacked_averaged_models)\n",
        "print(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "f2c78b5950097660d3f8b84bade8d8dbdc3964f2",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "4db03a27-e9fb-484d-bbfe-2058f16dce77",
        "id": "W6WCF2HKC3VB"
      }
    },
    {
      "source": [
        "def rmsle(y, y_pred):\n",
        "    return np.sqrt(mean_squared_error(y, y_pred))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "07f9ef433905b61a08a36790254d6a34661f0653",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "232c3959-c6e1-4535-8ad4-62892edc3f06",
        "id": "RCchdoX5C3VC"
      }
    },
    {
      "source": [
        "stacked_averaged_models.fit(train.values, y_train)\n",
        "stacked_train_pred = stacked_averaged_models.predict(train.values)\n",
        "stacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\n",
        "print(rmsle(y_train, stacked_train_pred))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "8936479533c4bb147ab09f1d2133d8bacbf9afc1",
        "collapsed": true,
        "_execution_state": "busy",
        "_cell_guid": "e64b2750-1e32-4e91-affb-e583d6ca8722",
        "id": "Ijr0xhd-C3VD"
      }
    },
    {
      "source": [
        "model_xgb.fit(train, y_train)\n",
        "xgb_train_pred = model_xgb.predict(train)\n",
        "xgb_pred = np.expm1(model_xgb.predict(test))\n",
        "print(rmsle(y_train, xgb_train_pred))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "c80de2558910e4091f087a99bfcb202f01033ad7",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "2af45055-47aa-4e26-84df-ba5726bdff54",
        "id": "7SK3H8imC3VD"
      }
    },
    {
      "source": [
        "model_lgb.fit(train, y_train)\n",
        "lgb_train_pred = model_lgb.predict(train)\n",
        "lgb_pred = np.expm1(model_lgb.predict(test.values))\n",
        "print(rmsle(y_train, lgb_train_pred))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "65398376dca67e2aa78576108a0bb8160031c111",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "995d4c8e-db72-4370-a1ec-50e0c761f09a",
        "id": "AhJJI2WnC3VD"
      }
    },
    {
      "source": [
        "'''RMSE on the entire Train data when averaging'''\n",
        "\n",
        "print('RMSLE score on train data:')\n",
        "print(rmsle(y_train,stacked_train_pred*0.70 +\n",
        "               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "07500cf506f6a90c6439c2dabf81ab966cf1c792",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "619452b2-c395-48fe-81ab-d6b1d355236b",
        "id": "Yu1YQEpjC3VE"
      }
    },
    {
      "source": [
        "ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "18996472b775bd9114fea7f08c8a554d4dafe774",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "3ec2c58f-6bee-46a6-a263-1fe2cf3569cb",
        "id": "T20Q-cCaC3VE"
      }
    },
    {
      "source": [
        "sub = pd.DataFrame()\n",
        "sub['Id'] = test_ID\n",
        "sub['SalePrice'] = ensemble\n",
        "sub.to_csv('submission.csv',index=False)"
      ],
      "cell_type": "code",
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "_uuid": "93f6915cf25c7bb6b6fa6e74ad7b853387ac1db5",
        "collapsed": true,
        "_execution_state": "idle",
        "_cell_guid": "3db46af9-e18a-43bb-9699-45b851f835e5",
        "id": "SASy5iCGC3VF"
      }
    }
  ],
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "nbconvert_exporter": "python",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "version": 3,
        "name": "ipython"
      },
      "name": "python",
      "version": "3.6.3",
      "pygments_lexer": "ipython3",
      "file_extension": ".py"
    },
    "colab": {
      "name": "Stacked Regressions : Top 4% on LeaderBoard",
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    }
  }
}